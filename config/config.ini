# IP处理工具配置文件模板
# 实际配置将通过环境变量或GitHub Secrets设置

[IP_CHECK]
# 是否启用IP检测功能 (true/false)
ENABLE_IP_CHECK = true

# IP检测方法 (ping/port)
# ping: 使用ping命令检测IP是否可达
# port: 检测指定端口是否开放
CHECK_METHOD = port

# 如果使用端口检测，指定要检测的端口号
CHECK_PORT = 443

# 检测超时时间（秒）
CHECK_TIMEOUT = 2

# 并发检测线程数
CHECK_THREADS = 50

[INPUT]
# 输入目录，存放原始IP文件的目录
INPUT_DIR = ips

[OUTPUT]
# 输出目录，处理后的文件将保存到此目录
OUTPUT_DIR = output

[cloudflare]
# 是否启用Cloudflare DNS上传功能 (true/false)
enable = true

# Cloudflare API Token
# 需要在Cloudflare控制台生成具有DNS编辑权限的Token
api_token = _EYQ5tkgr-96nO8OOnYA37kJ42jPKml6Xuth8yyN

# Cloudflare区域ID (Zone ID)
# 在Cloudflare域名概述页面可以找到
zone_id = 20f51f853f71843d0005691dc5d2c2d2

# 主域名，用于创建DNS记录
# 例如: example.com
domain = 009394.dpdns.org


# DNS记录名称前缀
# 如果设置为"ip"，则记录名为 ip-标签.域名
# 如果留空，则记录名为 标签.域名
record_name = ip

# DNS记录类型 (通常使用A记录)
record_type = A

# DNS记录TTL值
# 1 = 自动，或设置为60-86400之间的值
ttl = 1

# 是否通过Cloudflare代理 (true/false)
# true: 流量经过Cloudflare CDN
# false: 流量不经过Cloudflare，直接指向源服务器
proxied = false

# 每个标签上传的最大IP数量
max_records_per_line = 5

# 要上传的文件所在目录
upload_dir = output

# 要上传的文件列表
# all: 上传所有文件
# 或指定文件名，如: HK,US,JP (不需要.txt扩展名)
upload_files = all
